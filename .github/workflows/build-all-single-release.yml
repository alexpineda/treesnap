name: Build Tauri App (All Platforms - Single Release)

on:
  workflow_dispatch:

jobs:
  build-and-release:
    permissions:
      contents: write # Needed to create releases
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: "--target aarch64-apple-darwin --bundles dmg"
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: "--target x86_64-apple-darwin --bundles dmg"
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu # Optional target specifier for clarity
            args: "--bundles appimage"
          - platform: windows-latest
            target: x86_64-pc-windows-msvc # Optional target specifier for clarity
            args: "--bundles msi"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      # Bun Setup (Conditional for different OS shells)
      - name: Install Bun (Unix)
        if: runner.os != 'Windows'
        run: curl -fsSL https://bun.sh/install | bash -s -- "bun-v1.1.13"
      - name: Add Bun to PATH (Unix)
        if: runner.os != 'Windows'
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Install Bun (Windows)
        if: runner.os == 'Windows'
        run: powershell -Command "irm bun.sh/install.ps1 | iex"
      - name: Add Bun to PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "$env:USERPROFILE\.bun\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Install necessary targets only on macOS runners
          targets: ${{ matrix.platform == 'macos-latest' && format('{0},{1}', matrix.target, 'aarch64-apple-darwin,x86_64-apple-darwin') || matrix.target }}

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: bun install

      # Build and release using tauri-action
      - uses: tauri-apps/tauri-action@v0
        id: tauri-build # Add an ID to reference outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }} # Pass the signing key
          # Optional: TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: . # Optional: Explicitly set project path if not root
          tagName: v__VERSION__ # Use placeholder for automatic version fetching
          releaseName: "RepoSnap v__VERSION__"
          releaseBody: "Draft release for v__VERSION__."
          releaseDraft: true # Create a draft release
          prerelease: false
          # includeUpdaterJson: true # This is true by default when tagName is set
          args: ${{ matrix.args }} --verbose # Pass matrix args (target, bundles) and keep verbose
          # Optional: Specify tauriScript if bun isn't detected automatically
          # tauriScript: bun tauri

      - name: Debug Tauri Outputs
        if: matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-22.04'
        run: |
          echo "Tauri version output: ${{ steps.tauri-build.outputs.version }}"
          echo "Release ID: ${{ steps.tauri-build.outputs.releaseId }}"
          if [ -z "${{ steps.tauri-build.outputs.version }}" ]; then
            VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
            echo "Fallback version from tauri.conf.json: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "VERSION=${{ steps.tauri-build.outputs.version }}" >> $GITHUB_ENV
          fi

      - name: Debug Tauri Outputs
        if: matrix.platform == 'windows-latest'
        run: |
          Write-Host "Tauri version output: ${{ steps.tauri-build.outputs.version }}"
          Write-Host "Release ID: ${{ steps.tauri-build.outputs.releaseId }}"
          if (-not ${{ steps.tauri-build.outputs.version }}) {
            $version = (Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json).version
            Write-Host "Fallback version from tauri.conf.json: $version"
            "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            "VERSION=${{ steps.tauri-build.outputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      # Upload artifacts to Cloudflare R2
      - name: Upload Linux AppImage to R2
        if: matrix.platform == 'ubuntu-22.04' # Add condition to only run on Linux
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: src-tauri/target/release/bundle/appimage
          destination-dir: releases/${{ env.VERSION }}
          output-file-url: true

      - name: Upload macOS DMG to R2
        if: matrix.platform == 'macos-latest' # Add condition to only run on macOS
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: src-tauri/target/${{ matrix.target }}/release/bundle/dmg # Corrected path
          destination-dir: releases/${{ env.VERSION }}
          output-file-url: true

      - name: Upload Windows MSI to R2
        if: matrix.platform == 'windows-latest' # Add condition to only run on Windows
        uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: src-tauri/target/release/bundle/msi
          destination-dir: releases/${{ env.VERSION }}
          output-file-url: true
